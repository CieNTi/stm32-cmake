IF(NOT STM32Cube_DIR)
    MESSAGE(FATAL_ERROR "No STM32Cube_DIR specified")
ENDIF()

SET(FreeRTOS_DIR "${STM32Cube_DIR}/Middlewares/Third_Party/FreeRTOS/Source")

SET(FreeRTOS_COMMON_SOURCES
    croutine.c
    event_groups.c
    list.c
    queue.c
    tasks.c
    timers.c
)

SET(FreeRTOS_CMSIS_SOURCES
    cmsis_os.c
)

SET(FreeRTOS_COMMON_HEADERS
    croutine.h
    deprecated_definitions.h
    event_groups.h
    FreeRTOS.h
    list.h
    mpu_prototypes.h
    mpu_wrappers.h
    portable.h
    projdefs.h
    queue.h
    semphr.h
    StackMacros.h
    task.h
    timers.h
)

SET(FreeRTOS_CMSIS_HEADERS
    cmsis_os.h
)

SET(FreeRTOS_PORTABLE_SOURCES
    port.c
)

SET(FreeRTOS_PORTABLE_HEADERS
    portmacro.h
)

IF(STM32_FAMILY STREQUAL "F0")
    SET(FreeRTOS_PORTABLE_SUBDIR "portable/GCC/ARM_CM0")
ELSEIF(STM32_FAMILY STREQUAL "F1")
    SET(FreeRTOS_PORTABLE_SUBDIR "portable/GCC/ARM_CM3")
ELSEIF(STM32_FAMILY STREQUAL "F2")
    SET(FreeRTOS_PORTABLE_SUBDIR "portable/GCC/ARM_CM3")
ELSEIF(STM32_FAMILY STREQUAL "F3")
    SET(FreeRTOS_PORTABLE_SUBDIR "portable/GCC/ARM_CM4F")
ELSEIF(STM32_FAMILY STREQUAL "F4")
    SET(FreeRTOS_PORTABLE_SUBDIR "portable/GCC/ARM_CM4F")
ELSEIF(STM32_FAMILY STREQUAL "F7")
    SET(FreeRTOS_PORTABLE_SUBDIR "portable/GCC/ARM_CM7")
ELSEIF(STM32_FAMILY STREQUAL "L0")
    SET(FreeRTOS_PORTABLE_SUBDIR "portable/GCC/ARM_CM0")
ELSEIF(STM32_FAMILY STREQUAL "L1")
    SET(FreeRTOS_PORTABLE_SUBDIR "portable/GCC/ARM_CM3")
ELSEIF(STM32_FAMILY STREQUAL "L4")
    SET(FreeRTOS_PORTABLE_SUBDIR "portable/GCC/ARM_CM4F")
ENDIF()

FIND_PATH(FreeRTOS_COMMON_INCLUDE_DIR ${FreeRTOS_COMMON_HEADERS}
    HINTS ${FreeRTOS_DIR}/include
    CMAKE_FIND_ROOT_PATH_BOTH
)

FIND_PATH(FreeRTOS_CMSIS_INCLUDE_DIR ${FreeRTOS_CMSIS_HEADERS}
    HINTS ${FreeRTOS_DIR}/CMSIS_RTOS
    CMAKE_FIND_ROOT_PATH_BOTH
)

FIND_PATH(FreeRTOS_PORTABLE_INCLUDE_DIR ${FreeRTOS_PORTABLE_HEADERS}
    HINTS ${FreeRTOS_DIR}/${FreeRTOS_PORTABLE_SUBDIR}
    CMAKE_FIND_ROOT_PATH_BOTH
)

SET(FreeRTOS_INCLUDE_DIRS
    ${FreeRTOS_COMMON_INCLUDE_DIR}
    ${FreeRTOS_CMSIS_INCLUDE_DIR}
    ${FreeRTOS_PORTABLE_INCLUDE_DIR}
)

FOREACH(SRC ${FreeRTOS_COMMON_SOURCES})
    SET(SRC_FILE SRC_FILE-NOTFOUND)
    FIND_FILE(SRC_FILE ${SRC}
        HINTS ${FreeRTOS_DIR}
        CMAKE_FIND_ROOT_PATH_BOTH
    )
    LIST(APPEND FreeRTOS_SOURCES ${SRC_FILE})
ENDFOREACH()

FOREACH(SRC ${FreeRTOS_CMSIS_SOURCES})
    SET(SRC_FILE SRC_FILE-NOTFOUND)
    FIND_FILE(SRC_FILE ${SRC}
        HINTS ${FreeRTOS_DIR}/CMSIS_RTOS
        CMAKE_FIND_ROOT_PATH_BOTH
    )
    LIST(APPEND FreeRTOS_SOURCES ${SRC_FILE})
ENDFOREACH()

FOREACH(SRC ${FreeRTOS_PORTABLE_SOURCES})
    SET(SRC_FILE SRC_FILE-NOTFOUND)
    FIND_FILE(SRC_FILE ${SRC}
        HINTS ${FreeRTOS_DIR}/${FreeRTOS_PORTABLE_SUBDIR}
        CMAKE_FIND_ROOT_PATH_BOTH
    )
    LIST(APPEND FreeRTOS_SOURCES ${SRC_FILE})
ENDFOREACH()

SET(COUNT 0)
FOREACH(SRC ${FreeRTOS_FIND_COMPONENTS})
    STRING(REGEX MATCH "^(heap)_[0-5]$" MEMMANG_SRC ${SRC})
    IF(CMAKE_MATCH_1 STREQUAL "heap")
        MATH(EXPR COUNT "${COUNT}+1")
        IF(COUNT GREATER 1)
            MESSAGE(FATAL_ERROR "More than one memory manager requested.")
        ENDIF()
    ENDIF()
    SET(SRC_FILE SRC_FILE-NOTFOUND)
    FIND_FILE(SRC_FILE ${SRC}.c
        HINTS ${FreeRTOS_DIR}/portable/MemMang
        CMAKE_FIND_ROOT_PATH_BOTH
    )
    LIST(APPEND FreeRTOS_SOURCES ${SRC_FILE})
ENDFOREACH()

FOREACH(HDR ${FreeRTOS_COMMON_HEADERS} ${FreeRTOS_CMSIS_HEADERS} ${FreeRTOS_PORTABLE_HEADERS})
    SET(HDR_FILE HDR_FILE-NOTFOUND)
    FIND_FILE(HDR_FILE ${HDR}
        HINTS ${FreeRTOS_INCLUDE_DIRS}
        CMAKE_FIND_ROOT_PATH_BOTH
    )
    LIST(APPEND FreeRTOS_SOURCES ${HDR_FILE})
ENDFOREACH()

INCLUDE(FindPackageHandleStandardArgs)

FIND_PACKAGE_HANDLE_STANDARD_ARGS(FreeRTOS DEFAULT_MSG FreeRTOS_INCLUDE_DIRS FreeRTOS_SOURCES)
